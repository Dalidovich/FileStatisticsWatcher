// <auto-generated />
using System;
using FileStatisticsWatcher.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FileStatisticsWatcher.Migrations
{
    [DbContext(typeof(AppDBContext))]
    partial class AppDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FileStatisticsWatcher.Models.Entities.FileSettings", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("pk_file_settings_id");

                    b.Property<DateTime>("CreateDateUTC")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("create_date");

                    b.Property<short>("Depth")
                        .HasColumnType("smallint")
                        .HasColumnName("depth");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("extension");

                    b.Property<DateTime>("LastAccessDateUTC")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_access_date");

                    b.Property<DateTime>("LastWriteDateUTC")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_write_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("path");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("file_settings", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
